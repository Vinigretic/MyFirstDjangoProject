# ЧТО ТАКОЕ HTTP?
# HTTP расшифровывается как Hyper Text Transfer Protocol - Протокол Передачи Гипертекста. HTTP предлагает
# набор правил и стандартов, которые регулируют способ передачи любой информации во Всемирной паутине. HTTP
# предоставляет стандартные правила для взаимодействия веб-браузеров и серверов. По умолчанию данный протокол
# использует 80-ый порт.
# HTTP - это сетевой протокол прикладного уровня, созданный поверх TCP. HTTP использует структурированный текст гипертекста,
# который устанавливает логическую связь между узлами, содержащими текст. Он также известен как «протокол без состояния»,
# поскольку каждая команда выполняется отдельно, без использования ссылки на предыдущую команду запуска.
#
# ЧТО ТАКОЕ HTTPS?
# HTTPS - это защищенный протокол передачи гипертекста (Hyper Text Transfer Protocol Secure). Это продвинутая и безопасная
# версия HTTP. Для коммуникации данных используется 443-ий порт. Данный протокол позволяет обеспечить безопасность
# транзакций путем шифрования всего трафика с помощью SSL. Это комбинация протокола SSL/TLS и HTTP. Обеспечивает зашифрованную
# и безопасную идентификацию сетевого сервера.
#
# HTTPS также позволяет создать защищенное зашифрованное соединение между сервером и браузером. Он обеспечивает двунаправленную
# безопасность данных. Это помогает защитить потенциально конфиденциальную информацию от кражи.
#
# В протоколе HTTPS SSL транзакции согласовываются с помощью алгоритма шифрования на основе ключа. Обычно длина ключа
# составляет 40 или 128 бит.

# КЛЮЧЕВЫЕ РАЗЛИЧИЯ
# В HTTP отсутствует механизм защиты для шифрования данных, в то время как HTTPS для защиты связи между сервером и клиентом
# использует цифровой сертификат SSL или TLS.
# HTTP хорошо подходит для веб-сайтов общего назначения, таких как блоги, HTTPS Если на сайте нужно вводить конфиденциальную
# информацию, то данный протокол подходит больше
# HTTP передает данные открытым текстом, а HTTPS - зашифрованным.

# HTTP работает на уровне приложения, а HTTPS - на транспорном уровне.
# HTTP Работает с TCP/IP
# HTTPS Нет специального протокола. Работает поверх HTTP, но использует TLS/SSL шифрование.

# HTTP по умолчанию работает по 80-ому порту, а HTTPS – через 443-му.

# HTTP нет защиты передаваемой информации. Любой, кто прослушивает трафик может получить доступ к данным
# HTTPS шифрует данные перед передачей их по сети. На стороне получателя, данные расшифровываются.
# HTTP по сравнению с HTTPS работает быстрее, поскольку последнему нужно время для шифрования канала связи.

# Сайтам с HTTP не нужен SSL
# Для работы с HTTPS нужен SSL сертификат

# ПРЕИМУЩЕСТВА HTTP:
# HTTP может быть реализован на основе другого протокола в Интернете или в других сетях;
# Страницы HTTP хранятся в кэше компьютера и Интернета, поэтому доступ к ним осуществляется быстрее;
# Кроссплатформенность
# Не нуждается в поддержке среды выполнения
# Можно использовать через брандмауэры. Возможны глобальные приложения
# Не ориентирован на подключение; таким образом, отсутствуют накладные расходы на сеть для создания и поддержания
# состояния сеанса и информации

# ПРЕИМУЩЕСТВА HTTPS
# В большинстве случаев сайты, работающие по протоколу HTTPS, будут перенаправлены. Поэтому даже если ввести HTTP://,
# он перенаправит на https через защищенное соединение
# Это позволяет пользователям выполнять безопасные транзакции электронной коммерции, такие как онлайн-банкинг.
# Технология SSL защищает всех пользователей и создает доверие
# Независимый орган проверяет личность владельца сертификата. Таким образом, каждый SSL-сертификат содержит уникальную
# аутентифицированную информацию о владельце сертификата.

# ОГРАНИЧЕНИЯ HTTP
# Нет защиты информации, так как любой может прослушать и увидеть передаваемый контент
# Обеспечение целостности данных является большой проблемой, поскольку есть возможность изменения содержимого на лету во
# время передачи.
# Не знаешь кто на противоположной стороне. Любой, кто перехватит запрос, может получить имя пользователя и пароль.

# ОГРАНИЧЕНИЯ HTTPS
# Протокол HTTPS не может остановить кражу конфиденциальной информации со страниц, кэшированных в браузере
# Данные SSL могут быть зашифрованы только во время передачи по сети. Поэтому он не может очистить текст в памяти браузера
# HTTPS ввиду вычислений может увеличить задержки во время передачи данных.

# SSL/TLS - Протокол защиты транспортного уровня, обеспечивающие защищённую передачу данных между узлами в сети Интернет.
# TLS и SSL используют асимметричное шифрование для аутентификации, симметричное шифрование для конфиденциальности и коды
# аутентичности сообщений для сохранения целостности сообщений.

# ТИПЫ SSL/TLS-СЕРТИФИКАТОВ, ИСПОЛЬЗУЕМЫХ С HTTPS
# Теперь поговорим о типах SSL/TLS сертификатов, используемых с HTTPS:
#
# ПРОВЕРКА ДОМЕНА
# Проверка домена проверяет, является ли лицо, подающее заявку на сертификат, владельцем доменного имени. Этот тип проверки
# обычно занимает от нескольких минут до нескольких часов.
#
# ПРОВЕРКА ОРГАНИЗАЦИИ
# Центр сертификации не только проверяет принадлежность домена, но и идентифицирует владельцев. Это означает, что владельцу
# может быть предложено предоставить документ, удостоверяющий личность.
#
# РАСШИРЕННАЯ ПРОВЕРКА
# Расширенная проверка - это самый верхний уровень проверки. Она включает проверку владения доменом, личность владельца,
# а также подтверждение регистрации компании.

# 1. Структура запросов и ответов
# HTTP не имеет состояния. Он использует модель на основе сообщений. Каждое взаимодействие с клиентами включает запрос
# и ответ.
#
# Все сообщения по HTTP имеют один или несколько заголовков. За ними может следовать тело с данными, отправленными
# при запросе или полученными при ответе.
#
# Разберем структуру запроса на примере:
#
# _GET/adds/results?item=vwHTTP/1.1_
#
# Первая часть — используемый метод. Здесь мы извлекаем ресурсы с помощью GET. Затем идет запрошенный URL, последняя
# часть — версия HTTP. В примере она 1.1.
#
# В запросе могут быть и другие данные, которые записываются в разные хедеры:
#
# Referer header — адрес, с которого поступил запрос.
# User-Agent header — информация о браузере

# Host header — имя хоста.
# Cookie header — отправка дополнительных параметров на клиент.
#
# Ответы на HTTP запросы тоже состоят их трех частей. Например:
#
# _HTTP/1.1 200 OK_.
# Здесь сначала указывается версия HTTP, затем идет цифровой код и текстовое пояснение результата.
#
# 2. Методы HTTP-запроса
# Метод	Что делает
# GET	Запрашивает представление ресурса. Такие запросы могут только извлекать данные.
# HEAD	Запрашивает ресурс, как и GET, но ответ приходит без тела.
# POST	Отправляет сущности к указанному ресурсу. Может вызывать побочные эффекты на сервере и изменение состояния.
# PUT	Заменяет текущие представления ресурса данными запроса.
# DELETE	Удаляет указанный ресурс.
# CONNECT	Настраивает туннель с сервером, определенным по ресурсу.
# OPTIONS	Описывает параметры соединения с ресурсом.
# TRACE	Вызывает возвращаемое текстовое сообщение с ресурса.
# PATCH	Частично изменяет ресурс.
# Все HTTP Methods можно разделить на три большие группы:
#
# Безопасные — не меняют данные, можно выполнять их в любой последовательности. К ним относятся GET, HEAD и OPTIONS.
# Идемпотентные — при повторном выполнении результаты ожидаемо одинаковые. GET, HEAD, PUT, DELETE, OPTIONS, TRACE.
# Неидемпотентные — при повторном выполнении результаты будут отличаться. POST и PATCH.

# 4. Разница между GET и POST, POST и PUT
# Действие
# Кнопка «Назад» / Перезагрузка
# GET	- Безопасно,
# POST - Данные отправляются повторно, браузер должен предупреждать пользователя об этом
# Добавление в закладки
# GET	- 	Да
# POST - Нет
# Кеширование
# GET - Да
# POST - Нет
# Тип кодировки
# GET - application/x-www-form-urlencoded
# POST - application/x-www-form-urlencoded or multipart/form-data
# История
# GET - Сохраняется в истории
# POST - Не сохраняется в истории
# Ограничение в длине запроса
# GET - Запрос ограничен 2048 символами. Это связано с тем, что он передается внутри URL, который не может быть длиннее
# POST - Без ограничений
# Ограничение по типу данных
# GET -Только символы ASCII
# POST - Без ограничений, можно использовать двоичные данные
# Видимость в URL
# GET - Все данные видны в URL
# POST - Данные не отображаются в URL
# Безопасность
# GET - Данные, переданные в URL, видны пользователю. Безопасность низкая
# POST - Данные не отображаются в веб-клиенте, не кэшируются и не сохраняются. Безопасность высокая.
#
# Иногда также возникает вопрос, чем отличаются POST и PUT. Ключевое отличие в том, что PUT это идемпотентный метод,
# а POST — неидемпотентный.
#
# Иначе говоря, повторное применение PUT дает тот же результат, что и в первом случае. Повторный вызов POST
# может давать разные результаты. Например, если принимать заказы с помощью POST, то человек может сделать один
# и тот же заказ несколько раз.

# Метод PUT может использоваться как для создания новых ресурсов, так и для обновления старых. Однако в случае
# использования PUT для перезаписи предполагается, что в теле запроса передаётся закодированный ресурс целиком.
# Если же вы хотите модифицировать ресурс, т.е. изменить его внутреннее представление без полной перезаписи,
# то для этого был придуман метод PATCH. Этот метод некэшируемый, небезопасный и неидемпотентный.